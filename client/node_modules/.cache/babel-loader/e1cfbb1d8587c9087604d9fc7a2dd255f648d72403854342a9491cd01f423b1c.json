{"ast":null,"code":"//file for redux and toolkit\n\nimport { Token } from \"@mui/icons-material\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { act } from \"react\";\n\n//state stored in global, accessible throughout the application\nconst initialState = {\n  mode: \"light\",\n  //dark/light mode\n  user: null,\n  token: null,\n  posts: []\n};\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    //functions that involve modigying global state\n    setMode: state => {\n      //to change mode \n      state.mode = state.mode === 'light' ? \"dark\" : \"light\";\n    },\n    setLogin: (state, action) => {\n      //logging in \n      state.user = action.payload.user;\n      state.token -= action.payload.token;\n    },\n    setLogout: state => {\n      //when logged out\n      state.user = null;\n      state.token = null;\n    },\n    setFriends: (state, action) => {\n      //friends\n      if (state.user) {\n        state.user.friends = action.payload.friends;\n      } else {\n        console.error(\"No Friends... :(\");\n      }\n    },\n    setPosts: (state, action) => {\n      //posts\n      state.posts = action.payload.posts;\n    },\n    setPost: (state, action) => {\n      // return the post\n      const updatedPosts = state.posts.map(post => {\n        if (post._id === action.payload.post_id) return action.payload.post;\n        return post;\n      });\n      state.posts = updatedPosts;\n    }\n  }\n});\nexport const {\n  setMode,\n  setLogin,\n  setLogout,\n  setFriends,\n  setPosts,\n  setPost\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["Token","createSlice","act","initialState","mode","user","token","posts","authSlice","name","reducers","setMode","state","setLogin","action","payload","setLogout","setFriends","friends","console","error","setPosts","setPost","updatedPosts","map","post","_id","post_id","actions","reducer"],"sources":["C:/Users/User/Desktop/My Centenial Files/COMP229/COM229_FrontEnd/client/src/state/index.js"],"sourcesContent":["//file for redux and toolkit\r\n\r\nimport { Token } from \"@mui/icons-material\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport { act } from \"react\";\r\n\r\n//state stored in global, accessible throughout the application\r\nconst initialState = {\r\n    mode: \"light\",    //dark/light mode\r\n    user: null,\r\n    token: null,\r\n    posts: [],\r\n};\r\nexport const authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState,\r\n    reducers: {\r\n        //functions that involve modigying global state\r\n        setMode: (state) => {\r\n            //to change mode \r\n            state.mode = state.mode === 'light' ? \"dark\" : \"light\";\r\n        },\r\n        setLogin: (state, action) => {\r\n            //logging in \r\n            state.user = action.payload.user;\r\n            state.token -= action.payload.token;\r\n        },\r\n        setLogout: (state) => {\r\n            //when logged out\r\n            state.user = null;\r\n            state.token = null;\r\n        },\r\n        setFriends: (state, action) => {\r\n            //friends\r\n            if (state.user) {\r\n                state.user.friends = action.payload.friends;\r\n            }\r\n            else {\r\n                console.error(\"No Friends... :(\")\r\n            }\r\n        },\r\n        setPosts: (state, action) => {\r\n            //posts\r\n            state.posts = action.payload.posts;\r\n        },\r\n        setPost: (state, action) => {\r\n            // return the post\r\n            const updatedPosts = state.posts.map((post) => {\r\n                if (post._id === action.payload.post_id)\r\n                    return action.payload.post;\r\n                return post;\r\n            });\r\n            state.posts = updatedPosts;\r\n        }\r\n    }\r\n})\r\n\r\nexport const{ setMode, setLogin, setLogout, setFriends, setPosts, setPost } = authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"AAAA;;AAEA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,OAAO;;AAE3B;AACA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,OAAO;EAAK;EAClBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE;AACX,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;EACjCQ,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACN;IACAC,OAAO,EAAGC,KAAK,IAAK;MAChB;MACAA,KAAK,CAACR,IAAI,GAAGQ,KAAK,CAACR,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IAC1D,CAAC;IACDS,QAAQ,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACzB;MACAF,KAAK,CAACP,IAAI,GAAGS,MAAM,CAACC,OAAO,CAACV,IAAI;MAChCO,KAAK,CAACN,KAAK,IAAIQ,MAAM,CAACC,OAAO,CAACT,KAAK;IACvC,CAAC;IACDU,SAAS,EAAGJ,KAAK,IAAK;MAClB;MACAA,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB,CAAC;IACDW,UAAU,EAAEA,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC3B;MACA,IAAIF,KAAK,CAACP,IAAI,EAAE;QACZO,KAAK,CAACP,IAAI,CAACa,OAAO,GAAGJ,MAAM,CAACC,OAAO,CAACG,OAAO;MAC/C,CAAC,MACI;QACDC,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC;MACrC;IACJ,CAAC;IACDC,QAAQ,EAAEA,CAACT,KAAK,EAAEE,MAAM,KAAK;MACzB;MACAF,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO,CAACR,KAAK;IACtC,CAAC;IACDe,OAAO,EAAEA,CAACV,KAAK,EAAEE,MAAM,KAAK;MACxB;MACA,MAAMS,YAAY,GAAGX,KAAK,CAACL,KAAK,CAACiB,GAAG,CAAEC,IAAI,IAAK;QAC3C,IAAIA,IAAI,CAACC,GAAG,KAAKZ,MAAM,CAACC,OAAO,CAACY,OAAO,EACnC,OAAOb,MAAM,CAACC,OAAO,CAACU,IAAI;QAC9B,OAAOA,IAAI;MACf,CAAC,CAAC;MACFb,KAAK,CAACL,KAAK,GAAGgB,YAAY;IAC9B;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAK;EAAEZ,OAAO;EAAEE,QAAQ;EAAEG,SAAS;EAAEC,UAAU;EAAEI,QAAQ;EAAEC;AAAQ,CAAC,GAAGd,SAAS,CAACoB,OAAO;AAC/F,eAAepB,SAAS,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}